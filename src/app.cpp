#include "app.hpp"
#include <stdarg.h>
#include "vector.hpp"
#include "world.hpp"


namespace {

const uint8_t FONT_DATA[] = {
    0, 1, 24, 0, 2, 0, 0, 0, 0, 255, 255, 255, 255, 0, 0, 0, 57, 0, 1, 0, 0, 3, 34, 9, 4, 8,
    5, 70, 18, 75, 23, 24, 103, 19, 129, 33, 105, 8, 58, 36, 72, 9, 25, 8, 4, 18, 5, 207, 8,
    48, 9, 10, 184, 48, 54, 4, 206, 22, 231, 36, 152, 0, 59, 71, 30, 68, 16, 32, 81, 13, 71,
    18, 177, 127, 59, 124, 193, 19, 142, 145, 52, 239, 87, 44, 72, 240, 224, 34, 82, 211, 0,
    41, 176, 20, 70, 89, 200, 46, 183, 77, 24, 98, 247, 126, 65, 147, 34, 66, 85, 81, 144, 46,
    150, 179, 139, 129, 44, 74, 134, 9, 172, 128, 20, 93, 48, 15, 44, 161, 139, 201, 0, 33,
    156, 144, 63, 37, 158, 58, 208, 130, 173, 64, 127, 64, 89, 145, 100, 56, 16, 53, 193, 255,
    46, 138, 234, 21, 39, 99, 145, 199, 185, 40, 44, 215, 229, 199, 255, 50, 128, 36, 96, 150,
    120, 216, 2, 247, 200, 249, 43, 129, 49, 124, 63, 20, 145, 52, 76, 62, 178, 137, 200, 144,
    26, 167, 42, 67, 149, 53, 143, 48, 48, 130, 139, 141, 224, 41, 169, 128, 25, 90, 22, 136,
    163, 103, 205, 60, 128, 192, 52, 56, 70, 129, 33, 49, 87, 150, 128, 20, 16, 80, 161, 249,
    96, 250, 91, 16, 110, 136, 13, 136, 201, 36, 213, 47, 93, 225, 141, 77, 0, 89, 44, 182,
    51, 184, 167, 144, 168, 111, 200, 177, 119, 216, 160, 9, 74, 4, 35, 57, 28, 152, 224, 132,
    25, 96, 55, 16, 80, 81, 32, 22, 88, 7, 40, 5, 68, 81, 48, 71, 108, 168, 0, 74, 146, 115,
    60, 12, 144, 11, 132, 31, 49, 80, 46, 128, 187, 130, 39, 232, 94, 8, 4, 101, 56, 9, 136,
    49, 227, 20, 38, 42, 56, 108, 82, 177, 15, 174, 128, 200, 96, 47, 60, 52, 79, 24, 192,
    129, 40, 8, 166, 204, 40, 109, 138, 64, 225, 35, 29, 192, 144, 85, 244, 29, 114, 245, 217,
    4, 161, 46, 172, 128, 16, 80, 134, 128, 15, 72, 17, 56, 208, 170, 18, 132, 192, 222, 202,
    0, 182, 112, 214, 120, 102, 152, 128, 224, 2, 88, 121, 54, 66, 243, 128, 252, 56, 72, 139,
    192, 79, 40, 184, 200, 39, 37, 40, 128, 84, 116, 8, 218, 80, 185, 56, 64, 104, 93, 90,
    184, 214, 136, 146, 232, 135, 67, 228, 18, 146, 4, 97, 105, 44, 74, 101, 7, 29, 69, 26,
    128, 128, 40, 67, 74, 226, 225, 224, 170, 88, 145, 8, 215, 136, 222, 192, 251, 28, 4, 9,
    158, 119, 198, 197, 168, 1, 222, 216, 167, 81, 175, 161, 112, 197, 157, 101, 144, 228, 97,
    64, 214, 137, 176, 40, 113, 104, 55, 179, 32, 238, 88, 17, 16, 213, 48, 146, 0, 71, 104,
    115, 57, 16, 24, 193, 61, 129, 253, 40, 204, 130, 9, 73, 23, 37, 29, 212, 24, 54, 13, 216,
    120, 121, 31, 111, 82, 43, 7, 68, 52, 6, 9, 41, 211, 0, 93, 7, 42, 5, 218, 0, 251, 28,
    156, 7, 9, 6, 141, 96, 16, 180, 41, 21, 74, 9, 177, 12, 20, 48, 121, 136, 62, 47, 56, 67,
    189, 64, 96, 52, 112, 80, 33, 6, 79, 21, 96, 2, 60, 45, 3, 72, 27, 225, 128, 124, 33, 233,
    200, 50, 224, 12, 38, 124, 56, 208, 244, 178, 4, 36, 188, 97, 168, 22, 68, 213, 30, 91,
    159, 1, 196, 38, 89, 52, 44, 135, 121, 41, 158, 75, 129, 76, 215, 113, 24, 34, 129, 36,
    32, 130, 128, 82, 87, 59, 87, 146, 64, 86, 88, 101, 80, 198, 215, 207, 57, 14, 6, 147,
    129, 56, 207, 225, 60, 145, 0, 47, 229, 152, 128, 28, 232, 44, 16, 86, 53, 1, 92, 6, 16,
    40, 224, 73, 119, 200, 128, 88, 164, 39, 0, 19, 144, 22, 136, 246, 232, 65, 208, 68, 158,
    64, 211, 96, 197, 36, 49, 191, 241, 96, 169, 88, 76, 216, 151, 27, 65, 117, 75, 255, 20,
    39, 12, 164, 1, 85, 31, 47, 45, 87, 252, 208, 70, 111, 30, 119, 2
};


Surface g_font_surf;
int     g_tick;



} // namespace


Surface app::screen;
Input   app::input;


void update_input(uint32_t bits) {
    using namespace app;
    enum {
        LEFT  = 1,
        RIGHT = 2,
        UP    = 4,
        DOWN  = 8,
        JUMP  = 16,
        SHOOT = 32,
    };
    input.prev_x     = input.x;
    input.prev_y     = input.y;
    input.prev_jump  = input.jump;
    input.prev_shoot = input.shoot;
    input.x     = !!(bits & RIGHT) - !!(bits & LEFT);
    input.y     = !!(bits & DOWN ) - !!(bits & UP  );
    input.jump  = !!(bits & JUMP);
    input.shoot = !!(bits & SHOOT);
}


void app::init() {
    screen.init(WIDTH, HEIGHT);
    g_font_surf.init(FONT_DATA);
    world::init();
}


void app::update(uint32_t input_bits) {
    ++g_tick;
    update_input(input_bits);

    world::update();
}


void app::draw() {

//    screen.rect_filled({0, 0, WIDTH, HEIGHT}, 0);
    for (int y = 0; y < HEIGHT; ++y)
    for (int x = 0; x < WIDTH; ++x) {
        bool b = ((x + g_tick) / 8  ^ (y - g_tick / 4 - 200) / 8) % 2;
        screen.pixel(x, y, color(b * 10, 0, b * 10));
    }

    world::draw();

    print(4, HEIGHT - 20, "press Z/C to jump");
    print(4, HEIGHT - 10, "press X to shoot");
}


void app::print(int x, int y, char const* fmt, ...) {
    enum { MAX_LEN = 1024 };
    char str[MAX_LEN];
    va_list args;
    va_start(args, fmt);
    vsprintf(str, fmt, args);
    va_end(args);
    int xx = x;
    int c;
    for (int i = 0; (c = str[i]); ++i) {
        if (c == '\n') {
            y += 12;
            xx = x;
            continue;
        }
        if (c > 32) {
            c -= 32;
            screen.copy(g_font_surf, {c % 32 * 8, c / 32 * 8, 8, 8}, xx, y);
        }
        xx += 8;
    }
}
